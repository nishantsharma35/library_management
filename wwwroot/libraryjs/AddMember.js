$(document).ready(function () {    //console.log(typeof $.fn.validate); // Should print "function"    const toggleIcon = document.getElementById("passwordToggleIcon");    const passwordInput = document.getElementById("passwordField");        const id = $("#Id").val();    if (id == 0) {        toggleIcon.addEventListener("click", function () {            if (passwordInput.type === "password") {                passwordInput.type = "text";                toggleIcon.classList.remove("fa-lock");                toggleIcon.classList.add("fa-lock-open");            } else {                passwordInput.type = "password";                toggleIcon.classList.remove("fa-lock-open");                toggleIcon.classList.add("fa-lock");            }        });

        const phoneInputField = document.querySelector("#Phoneno");        phoneInput = window.intlTelInput(phoneInputField, {            initialCountry: "IN", // Set initial country (auto or a specific code like "us")            geoIpLookup: function (callback) {                fetch('https://ipapi.co/json', { mode: 'no-cors' })                    .then((response) => response.json())                    .then((data) => callback(data.country_code))                    .catch(() => callback("us"));            },            utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"        });
    }    document.getElementById('profilefile').addEventListener('change', function (e) {        var file = e.target.files[0];        if (file) {            var reader = new FileReader();            reader.onload = function (event) {                var imagePreview = document.getElementById('imagePreview');                imagePreview.src = event.target.result;                imagePreview.style.display = 'block';            };            reader.readAsDataURL(file);        }    });        fetch(`/MemberMaster/states`)        .then(response => {            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);            return response.json();        })        .then(data => {            const states = data.geonames;            const selectedState = $("#selectedState").val();            let stateOptions = `<option value="">Select State</option>`;            states.forEach(state => {                const selected = state.name === selectedState ? "selected" : "";                stateOptions += `<option value="${state.name}" data-id="${state.geonameId}" ${selected}>${state.name}</option>`;            });            $("#State").html(stateOptions).trigger("change"); // Trigger change to load city if editing        })        .catch(error => console.error("Error fetching states:", error));    // Load Cities    const selectedCity = $("#selectedCity").val();    $("#State").on("change", function () {        const selectedStateGeonameId = $(this).find("option:selected").data("id");        if (selectedStateGeonameId) {            fetch(`/MemberMaster/cities/${selectedStateGeonameId}`)                .then(response => {                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);                    return response.json();                })                .then(data => {                    const cities = data.geonames;                    let cityOptions = `<option value="">Select City</option>`;                    cities.forEach(city => {                        const isSelected = city.name === selectedCity ? "selected" : "";                        cityOptions += `<option value="${city.name}" data-id="${city.geonameId}" ${isSelected}>${city.name}</option>`;                    });                    $("#City").html(cityOptions);                })                .catch(error => console.error("Error fetching cities:", error));        } else {            $("#City").html(`<option value="">Select City</option>`);        }    });    $("#SaveUser").validate({        //rules: {        //    FirstName: {        //        required: true,        //        lettersOnly: true, // Custom method for letters only        //        maxlength: 20        //    },        //    LastName: {        //        lettersOnly: true // Custom method for letters only        //    },        //    Username: {        //        required: true        //    },        //    Email: {        //        required: true,        //        email: true        //    },        //    Phone: {        //        required: true,        //        digits: true,        //        minlength: 6,        //        maxlength: 15        //    },        //    PasswordHash: {        //        minlength: 6,        //        required: function () {        //            return $("#UserId").val() === ""; // Require password only if AdminId is empty (new admin)        //        }        //    }        //},        //messages: {        //    FirstName: {        //        required: "Please enter your first name."        //    },        //    Email: {        //        required: "Please enter your email.",        //        email: "Please enter a valid email address."        //    },        //    Phone: {        //        required: "Please enter your phone number.",        //        digits: "Please enter only numbers.",        //        minlength: "Phone number must be at least 6 digits.",        //        maxlength: "Phone number cannot exceed 15 digits."        //    },        //    PasswordHash: {        //        minlength: "Password must have atleast 6 digits",        //        required: "Password is required"        //    },        //    Username: {        //        required: "Please enter admin Username"        //    }        //},        submitHandler: function (form, event) {            event.preventDefault();            const formData = new FormData(form);            const btnRegister = $("#btnSubmit");            const btnLoader = $("#btnLoader");            btnRegister.prop("disabled", true);            btnLoader.removeClass("d-none");            setTimeout(function () {                $.ajax({                    url: '/MemberMaster/AddMember',                    type: 'POST',                    processData: false,                    contentType: false,                    data: formData,                    dataType: 'json', // Make sure you specify that the response is expected to be JSON                    success: function (result) {                        // Ensure the response is a JSON object                        if (result && result.message) {                            // Show the response in a Toast notification                            showToast(result.message, result.success ? 'success' : 'error');                            // If successful, redirect after showing the Toast message                            if (result.success) {                                setTimeout(() => {                                    window.location.href = '/MemberMaster/MemberList';                                }, 1500);                            }                        } else {                            // Handle unexpected or empty responses                            showToast('Unexpected response received.', 'error');                        }                    },                    complete: function () {                        btnRegister.prop("disabled", false);                        btnLoader.addClass("d-none");                    },                    error: function () {                        showToast('An error occurred while registering the user.', 'error');                    }                });            }, 2000);        }    });    function showToast(message, icon = 'success') {        Swal.fire({            toast: true,            position: 'top-end',            icon: icon,            title: message,            showConfirmButton: false,            timer: 3000,            timerProgressBar: true,            customClass: {                popup: 'custom-toast-popup',                title: 'custom-toast-title'            },            iconColor: icon === 'success' ? '#28a745' :                icon === 'error' ? '#dc3545' :                    icon === 'warning' ? '#ffc107' : '#17a2b8',            didOpen: (toast) => {                toast.addEventListener('mouseenter', Swal.stopTimer);                toast.addEventListener('mouseleave', Swal.resumeTimer);            }        });    }    //// Custom method for letters only    //$.validator.addMethod("lettersOnly", function (value, element) {    //    return this.optional(element) || /^[a-zA-Z]+$/.test(value);    //}, "Please enter only letters.");    //// Custom validation method for file extension    //$.validator.addMethod("extension", function (value, element, param) {    //    return this.optional(element) || param.split("|").some(ext => value.endsWith(`.${ext}`));    //}, "Please upload a valid image file (jpg, jpeg, png).");    //// Add custom validation method for DateOfBirth    //$.validator.addMethod("dateBeforeToday", function (value, element) {    //    // Get today's date    //    var today = new Date();    //    // Convert the input value into a date object (assuming it's in 'YYYY-MM-DD' format)    //    var selectedDate = new Date(value);    //    // Compare if the selected date is earlier than today    //    return this.optional(element) || selectedDate < today;    //}, "Date of birth must be before today's date.");});