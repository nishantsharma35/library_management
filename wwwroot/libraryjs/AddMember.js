$(document).ready(function () {    //console.log(typeof $.fn.validate); // Should print "function"            const toggleIcon = document.getElementById("passwordToggleIcon");        const passwordInput = document.getElementById("passwordField");        toggleIcon.addEventListener("click", function () {            if (passwordInput.type === "password") {            passwordInput.type = "text";        toggleIcon.classList.remove("fa-lock");        toggleIcon.classList.add("fa-lock-open");            } else {            passwordInput.type = "password";        toggleIcon.classList.remove("fa-lock-open");        toggleIcon.classList.add("fa-lock");            }        });           fetch(`/MemberMaster/states`)        .then(response => {            if (!response.ok) {                throw new Error(`HTTP error! status: ${response.status}`);            }            return response.json();        })        .then(data => {            const states = data.geonames;            let stateOptions = `<option value="">Select State</option>`;            states.forEach(state => {                // Store name as the value and geonameId in data-id                stateOptions += `<option value="${state.name}" data-id="${state.geonameId}">${state.name}</option>`;            });            $("#State").html(stateOptions);        })        .catch(error => {            console.error("Error fetching states:", error);        });    // Fetch Cities when a state is selected    $("#State").on("change", function () {        const selectedStateGeonameId = $(this).find("option:selected").data("id"); // Get geonameId from data-id        if (selectedStateGeonameId) {            fetch(`/MemberMaster/cities/${selectedStateGeonameId}`)                .then(response => {                    if (!response.ok) {                        throw new Error(`HTTP error! status: ${response.status}`);                    }                    return response.json();                })                .then(data => {                    const cities = data.geonames;                    let cityOptions = `<option value="">Select City</option>`;                    cities.forEach(city => {                        // Store city name as the value and optionally include geonameId in data-id                        cityOptions += `<option value="${city.name}" data-id="${city.geonameId}">${city.name}</option>`;                    });                    $("#City").html(cityOptions);                })                .catch(error => {                    console.error("Error fetching cities:", error);                });        } else {            $("#City").html(`<option value="">Select City</option>`); // Reset city dropdown        }    });       $("#SaveUser").validate({        //rules: {        //    FirstName: {        //        required: true,        //        lettersOnly: true, // Custom method for letters only        //        maxlength: 20        //    },        //    LastName: {        //        lettersOnly: true // Custom method for letters only        //    },        //    Username: {        //        required: true        //    },        //    Email: {        //        required: true,        //        email: true        //    },        //    Phone: {        //        required: true,        //        digits: true,        //        minlength: 6,        //        maxlength: 15        //    },        //    PasswordHash: {        //        minlength: 6,        //        required: function () {        //            return $("#UserId").val() === ""; // Require password only if AdminId is empty (new admin)        //        }        //    }        //},        //messages: {        //    FirstName: {        //        required: "Please enter your first name."        //    },        //    Email: {        //        required: "Please enter your email.",        //        email: "Please enter a valid email address."        //    },        //    Phone: {        //        required: "Please enter your phone number.",        //        digits: "Please enter only numbers.",        //        minlength: "Phone number must be at least 6 digits.",        //        maxlength: "Phone number cannot exceed 15 digits."        //    },        //    PasswordHash: {        //        minlength: "Password must have atleast 6 digits",        //        required: "Password is required"        //    },        //    Username: {        //        required: "Please enter admin Username"        //    }        //},        submitHandler: function (form, event) {            event.preventDefault()            const formData = new FormData(form);            //const formattedPhoneNumber = phoneInput.getNumber(intlTelInputUtils.numberFormat.E164);            //formData.set("PhoneNumber", formattedPhoneNumber);            const btnRegister = $("#btnSubmit");            const btnLoader = $("#btnLoader");            btnRegister.prop("disabled", true);            btnLoader.removeClass("d-none");            setTimeout(function () {                // AJAX submission                $.ajax({                    url: '/MemberMaster/AddMember',                    type: 'POST',                    processData: false,                    contentType: false,                    data: formData,                    success: function (result) {                        console.log("Success block hit:", result);                        showToast(result.message, "success");                        if (result.success) {                            setTimeout(() => {                                window.location.href = '/MemberMaster/MemberList';                            }, 1500);                        }                    },                    complete: function () {                        // Re-enable button and hide loader                        btnRegister.prop("disabled", false);                        btnLoader.addClass("d-none");                    },                    error: function () {                        showToast('An error occurred while registering the user.');                    }                });            }, 2000);        }    });    //// Custom method for letters only    //$.validator.addMethod("lettersOnly", function (value, element) {    //    return this.optional(element) || /^[a-zA-Z]+$/.test(value);    //}, "Please enter only letters.");    //// Custom validation method for file extension    //$.validator.addMethod("extension", function (value, element, param) {    //    return this.optional(element) || param.split("|").some(ext => value.endsWith(`.${ext}`));    //}, "Please upload a valid image file (jpg, jpeg, png).");    //// Add custom validation method for DateOfBirth    //$.validator.addMethod("dateBeforeToday", function (value, element) {    //    // Get today's date    //    var today = new Date();    //    // Convert the input value into a date object (assuming it's in 'YYYY-MM-DD' format)    //    var selectedDate = new Date(value);    //    // Compare if the selected date is earlier than today    //    return this.optional(element) || selectedDate < today;    //}, "Date of birth must be before today's date.");});